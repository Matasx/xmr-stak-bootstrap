//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace xmr_stak_bootstrap.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("xmr_stak_bootstrap.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        /// * GPU configuration. You should play around with intensity and worksize as the fastest settings will vary.
        /// *      index    - GPU index number usually starts from 0
        /// *  intensity    - Number of parallel GPU threads (nothing to do with CPU threads)
        /// *   worksize    - Number of local GPU threads (nothing to do with CPU threads)
        /// * affine_to_cpu - This will affine the thread to a CPU. This can make a GPU miner play along nicer with a CPU miner.
        /// * strided_index - switch memory pattern used for the sc [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string amd_source {
            get {
                return ResourceManager.GetString("amd_source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ////*
        /// * pool_address    - Pool address should be in the form &quot;pool.supportxmr.com:3333&quot;. Only stratum pools are supported.
        /// * wallet_address  - Your wallet, or pool login.
        /// * pool_password   - Can be empty in most cases or &quot;x&quot;.
        /// * use_nicehash    - Limit the nonce to 3 bytes as required by nicehash.
        /// * use_tls         - This option will make us connect using Transport Layer Security.
        /// * tls_fingerprint - Server&apos;s SHA256 fingerprint. If this string is non-empty then we will check the server&apos;s cert agai [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string config_source {
            get {
                return ResourceManager.GetString("config_source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ////*
        /// * Thread configuration for each thread. Make sure it matches the number above.
        /// * low_power_mode - This can either be a boolean (true or false), or a number between 1 to 5. When set to true,
        ///                    this mode will double the cache usage, and double the single thread performance. It will 
        /// *                  consume much less power (as less cores are working), but will max out at around 80-85% of 
        /// *                  the maximum performance. When set to a number N greater than 1, this  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string cpu_source {
            get {
                return ResourceManager.GetString("cpu_source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ////*
        /// * GPU configuration. You should play around with threads and blocks as the fastest settings will vary.
        /// * index         - GPU index number usually starts from 0.
        /// * threads       - Number of GPU threads (nothing to do with CPU threads).
        /// * blocks        - Number of GPU blocks (nothing to do with CPU threads).
        /// * bfactor       - Enables running the Cryptonight kernel in smaller pieces.
        /// *                 Increase if you want to reduce GPU lag. Recommended setting on GUI systems - 8
        /// * bsleep     [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string nvidia_source {
            get {
                return ResourceManager.GetString("nvidia_source", resourceCulture);
            }
        }
    }
}
